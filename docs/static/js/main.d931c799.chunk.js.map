{"version":3,"sources":["logo.svg","App.js","graphql/queries.js","graphql/subscriptions.js","graphql/mutations.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["CLIENT_ID","uuid","initialState","notes","loading","error","form","name","description","reducer","state","action","type","note","value","App","useReducer","dispatch","fetchNotes","a","API","graphql","query","notesData","data","listTodos","items","console","useEffect","subscription","subscribe","next","onCreateTodo","clientId","unsubscribe","styles","container","padding","input","marginBottom","item","textAlign","p","color","createNote","alert","completed","id","variables","log","onChange","e","target","deleteTodo","noteToDelete","filter","x","err","updateTodo","noteToUpdate","map","style","placeholder","onClick","dataSource","renderItem","Item","actions","Meta","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d931c799.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nimport \n  React\n    , {\n    useEffect, \n    useReducer\n} from 'react';\n\nimport { API } from 'aws-amplify';\n\n//import { List } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport { listTodos } from './graphql/queries';\n\nimport { v4 as uuid } from 'uuid';\n\nimport { \n  List, \n  Input, \n  Button \n} from 'antd';\n\nimport { \n  createTodo as CreateTodo\n  ,deleteTodo as DeleteNote \n  ,updateTodo as UpdateNote\n} from './graphql/mutations';\n\nimport { onCreateTodo } from './graphql/subscriptions';\n\nconst CLIENT_ID = uuid()\n\nconst initialState = {\n  notes: [],\n  loading: true,\n  error: false,\n  form: { \n    name: '', \n    description: '' \n  }\n}\n//No need for break when you are returning\nconst reducer = (state, action) => {\n  switch(action.type) {\n    case 'SET_NOTES':\n      return {\n        ...state,\n        notes: action.notes,\n        loading: false\n      };\n      //break;\n\n    case 'ERROR':\n      return {\n        ...state,\n        loading: false,\n        error: true\n      };\n      //break;\n\n      case 'ADD_NOTE':\n        return { \n          ...state,\n           notes: [\n             action.note,\n              ...state.notes\n            ]\n          };\n          //break;\n\n      case 'RESET_FORM':\n        return { \n          ...state, \n          form: initialState.form \n        };\n        //break;\n\n      case 'SET_INPUT':\n        return { \n          ...state, \n          form: { \n            ...state.form, \n            [action.name]: action.value \n          } \n        };\n          //break;\n\n    default:\n      return { \n        ...state \n      };\n      //break;\n  }\n}\n\nconst App = () => {\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchNotes = async () => {\n    try {\n      const notesData = await API.graphql({\n        query: listTodos\n      });\n\n      dispatch({\n        type: \"SET_NOTES\", \n        notes: notesData.data.listTodos.items\n      })\n    }\n\n    catch (err) {\n      console.error(err);\n      dispatch({\n        type: \"ERROR\"\n      });\n    }\n  } \n\n  useEffect(\n    () => {\n      fetchNotes();\n\n      const subscription = API.graphql(\n        {\n          query: onCreateTodo\n        }\n      ).subscribe(\n        {\n          next: (notesData) => {\n            //Get the note from the subscription payload?\n            const note = notesData.value.data.onCreateTodo;\n\n            //Bail if this instance of the app caused this subscription,\n            if (note.clientId === CLIENT_ID) {\n              return;\n            }\n            //Otherwise update the state with the new note\n            dispatch({\n              type: \"ADD_NOTE\"\n              , note: note\n            });\n          }\n        }\n      );\n      return () => subscription.unsubscribe();\n    }\n    ,[] \n  );\n\n  const styles = {\n    container: {\n      padding: 20\n    },\n    input: {\n      marginBottom: 10\n    },\n    item: { \n      textAlign: 'left' \n    },\n    p: { \n      color: '#1890ff' \n    }\n  };\n\nconst createNote = async () => {\n  //Destructuring\n  const { form } = state\n\n  //Lame form validation...but, good enough\n  if (!form.name || !form.description) {\n    return alert('please enter a name and description');\n  }\n\n  const note = { \n    ...form, clientId: CLIENT_ID, \n    completed: false, \n    id: uuid() \n  };\n  \n  //Optimistic Dispatch\n  dispatch({ \n    type: 'ADD_NOTE', \n\n    //shorthand for note: note\n    note \n  });\n\n  dispatch({ \n    type: 'RESET_FORM'\n  });\n\n  try {\n    await API.graphql({\n      query: CreateTodo,\n      variables: { input: note }\n    });\n\n    console.log('successfully created note!');\n\n    } catch (err) {\n      console.error(\"error: \", err);\n    }\n  };\n\n  const onChange = (e) => {\n    dispatch({ \n      type: 'SET_INPUT', \n      name: e.target.name, \n      value: e.target.value \n    });\n  };\n\n  const deleteTodo = async (noteToDelete) => {\n    //Update state with the note removed\n    dispatch({\n      type: \"SET_NOTES\"\n      , notes: state.notes.filter(x => x != noteToDelete)\n    });\n    //Call backend delete note\n      try {\n        await API.graphql({\n          query: DeleteNote\n          , variables: { \n            input: {\n              id: noteToDelete.id \n            }\n          }\n        });\n      }\n      catch (err) {\n        console.error({ err })\n      }\n  }\n\n  const updateTodo = async (noteToUpdate) => {\n    //Update State\n    dispatch({\n      type: \"SET_NOTES\"\n      , notes: state.notes.map(x => ({\n        ...x\n        , completed: x == noteToUpdate ? !x.completed : x.completed\n      }))\n    });\n\n    //Call the Backend\n    try {\n      await API.graphql({\n        query: UpdateNote\n        , variables: {\n          input: {\n            id: noteToUpdate.id\n            , completed: !noteToUpdate.completed\n          }\n        }\n      });\n    }\n    catch(err) {\n      console.error(err);\n    }\n  }\n\n  const renderItem = (item) => {\n    return (\n      <List.Item \n        style={styles.item}\n        actions={[\n          <p\n            style={styles.p}\n            onClick={() => deleteTodo(item)}\n          >\n            Delete\n          </p>\n          , <p\n              style={styles.p}\n              onClick={() => updateTodo(item)}\n            >\n              { item.completed ? 'Mark Incomplete' : 'Mark Complete' }\n          </p>\n        ]}\n      >\n        <List.Item.Meta\n          title={ item.name + (item.completed ? ' (completed)' : '' )}\n          description={item.description}\n        />\n      </List.Item>\n    );\n  }\n\n  return (\n    <div \n      style={styles.container}>\n      <Input\n        onChange={onChange}\n        value={state.form.name}\n        placeholder=\"Note Name\"\n        name='name'\n        style={styles.input}\n      />\n      <Input\n        onChange={onChange}\n        value={state.form.description}\n        placeholder=\"Note description\"\n        name='description'\n        style={styles.input}\n      />\n      <Button\n        onClick={createNote}\n        type=\"primary\"\n      >Create Note</Button>\n      <List\n        loading={state.loading}\n        dataSource={state.notes}\n        renderItem={renderItem}\n      />\n    </div>\n  );\n\n}\n\nexport default App;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = /* GraphQL */ `\n  query GetTodo($id: ID!) {\n    getTodo(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listTodos = /* GraphQL */ `\n  query ListTodos(\n    $filter: ModelTodoFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateTodo = /* GraphQL */ `\n  subscription OnCreateTodo {\n    onCreateTodo {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateTodo = /* GraphQL */ `\n  subscription OnUpdateTodo {\n    onUpdateTodo {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteTodo = /* GraphQL */ `\n  subscription OnDeleteTodo {\n    onDeleteTodo {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createTodo = /* GraphQL */ `\n  mutation CreateTodo(\n    $input: CreateTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    createTodo(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateTodo = /* GraphQL */ `\n  mutation UpdateTodo(\n    $input: UpdateTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    updateTodo(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteTodo = /* GraphQL */ `\n  mutation DeleteTodo(\n    $input: DeleteTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    deleteTodo(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://47vx7p2yybdvnfjj547esgea4q.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-qcps3csz2rafhh26gpbfgmsmie\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}